Notes on work so far:

Useful information in existing packages to reference:
In the dbcopy source code:
    We'll find functions to obtain parameters and parameter-lists.
    This one doesn't implement restricting results based on language, so we'll have to look elsewhere for this aspect.
    Compare which functions in the data access layer get used here versus which ones are used by the web service (recall the web service itself uses an intermediate object named the model catalog).
    This one looks to be the main reference for how to format output into 

In the web service source code:
    We'll find functions that query entire model metadata.
    But they use an intermediate data access layer (model catalog) to do it.
    And they only produce json output (not csv or tsv).

In existing dbget code:
    Look for how model-list gets implemented.
    For model-list it implements restricting output based on language choice.
    Also study for how it returns supplementary notes (when dbget.Notes is set).
        There's probably an existing function in the db data access layer for it.

Some key functions and type definitions in the object relational layer in the db package:
    ompp/db/getModel.go
        GetModel
    ompp/db/getModelText.go
        GetModelText
    ompp/db/dbModel.go 
        Has all the basic stuct types that correspond to model database components.
        ModelTxtMeta
        ModelDicRow
        ModelTxtRow
        TypeDicRow
        TypeTxtRow
        ParamDicRow
        ParamTxtRow
        ParamDimsRow
        ParamDimsTxtRow
        bunch of others...

Established the command syntax to use:
    dbget -m <model> -do <action> [-dbget.As csv|tsv|json] [-dbget.Notes] 
        Where -m specifies model name or digest and is mandatory.
        -do specifies the action, and is mandatory.
        -dbget.As specifies the output format (with default being csv).
        -dbget.Notes is a boolean flag that specifies is supplementary notes are requested.

Initial output to produce:
    Implement actions to obtain individual parts of model metadata.
    Model metadata consists of these parts:
        Parameters
        Type definitions
        Output tables
        Entities
        Groups

    Start with obtaining parameters.
    So the action option would be set to: -do parameter-list
    This will require producing two to four output files:
        One for list of model parameters.
        Another containing a list of parameter dimensions, which is understood to be part of the parameter-list ouput.
        Two additional files containing supplementary notes data if -dbget.Notes flag is set.


Implementing function getModelParameters(model name or digest, output type, notes) error
Placing function definition in dbget/modelMeta.go.
    (It's the source file that has the existing action handlers so far.)


--- Stepping through oms read model metadata request again to get insight into which functions to reuse ---

Command:
    GET <domain name>/api/model/<model>
        Where <model> is requested model name or model digest.
        Model name may not be unique. If that's the case then service returns first model match.
        Digests are unique identifiers consisting of 32 alphanumeric characters.

Method:
    main.modelMetaHandler

Source file:
    go/oms/handlerGet.go

Key objects:
    db.ModelMeta
        Is a structure type that contains model information coming from the underlying database. It has structure type fields that correspond to rows in the database that describe various aspects of the model.
    db.WorksetRow
    main.ModelMetaUnpack   
    main.jsonResponse       


doModelTextHandler(w http.ResponseWriter, r *http.Request, isPack bool)
    We need to unpack the http related wrappers for the actual parameters and return values:
        Desired input parameters: model name or digest.
        Desired output:
            First, a golang data structure holding all the relevant model metadata.
            Second, transform the golang data structure into json, csv, or tsv files.

The complications so far in using the oms code:\
    I will need to initialize a model catalog object every time the command is being run.
        Instances of references to theCatalog:
            
    I need to change the input and output argument from http requests and responses to actual arguments.

The functions that I need to intercept:
    getRequestParam(r, "model") string
    getRequestLang(r, "lang") []language.Tag (this type is a rabbit hole)
        I need to produce their return values directly based on stuff coming from config and command line args.

    jsonResponse
        Is passed the mt and mcp data structures holding the model metadata. 
        We need to see how it handles them.
        It uses json.NewEncoder(w).Encode(src)
        We will need to find an alternative encoder for file or command line output.

work on: 
    DONE update getModelMetaWithText to return errors and the mc, mcp structures as return values.
    invoke getModelMetaWithText with the appropriate arguments in modelMeta.go
    pipe output or error to appropriate console based handlers.
    initializing the model catalog object
